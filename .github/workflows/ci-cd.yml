name: CICD pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
    id-token: write
    contents: read

jobs:

  code-checks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
          dotnet-version: '9.0'

    - name: Restore Dependencies
      run: dotnet restore ProductCatalogAPI.sln

    - name: Code Formatting Check
      run: dotnet format ProductCatalogAPI.sln --verify-no-changes

    - name: Run Tests
      run: dotnet test ProductCatalogAPI.sln --configuration Release --no-restore --verbosity normal

  build-and-push:
    needs: code-checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
          context: ./ProductCatalogAPI
          file: ./ProductCatalogAPI/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/product-catalog-api:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
        
    - name: Azure Login action
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group productcatalog-rg --name ASK-productcatalog

    - name: Create namespace if not exists
      run: kubectl create namespace productcatalog --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      run: |
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl create configmap create-db-configmap --from-file=k8s/create_db.js -n productcatalog
        kubectl apply -f kubernetes/mongo.yaml
        kubectl apply -f kubernetes/deployment.yaml

    - name: Get Pods
      run: kubectl get pods -n productcatalog
